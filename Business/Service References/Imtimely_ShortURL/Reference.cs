//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.1008
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Business.Imtimely_ShortURL {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Imtimely_ShortURL.IShortURLService")]
    public interface IShortURLService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShortURLService/GetURL", ReplyAction="http://tempuri.org/IShortURLService/GetURLResponse")]
        string[] GetURL(string fullUrl);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IShortURLService/GetURL", ReplyAction="http://tempuri.org/IShortURLService/GetURLResponse")]
        System.IAsyncResult BeginGetURL(string fullUrl, System.AsyncCallback callback, object asyncState);
        
        string[] EndGetURL(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShortURLService/DeleteShortURL", ReplyAction="http://tempuri.org/IShortURLService/DeleteShortURLResponse")]
        void DeleteShortURL(string shortURL);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IShortURLService/DeleteShortURL", ReplyAction="http://tempuri.org/IShortURLService/DeleteShortURLResponse")]
        System.IAsyncResult BeginDeleteShortURL(string shortURL, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteShortURL(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IShortURLServiceChannel : Business.Imtimely_ShortURL.IShortURLService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetURLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetURLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ShortURLServiceClient : System.ServiceModel.ClientBase<Business.Imtimely_ShortURL.IShortURLService>, Business.Imtimely_ShortURL.IShortURLService {
        
        private BeginOperationDelegate onBeginGetURLDelegate;
        
        private EndOperationDelegate onEndGetURLDelegate;
        
        private System.Threading.SendOrPostCallback onGetURLCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteShortURLDelegate;
        
        private EndOperationDelegate onEndDeleteShortURLDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteShortURLCompletedDelegate;
        
        public ShortURLServiceClient() {
        }
        
        public ShortURLServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ShortURLServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ShortURLServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ShortURLServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<GetURLCompletedEventArgs> GetURLCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteShortURLCompleted;
        
        public string[] GetURL(string fullUrl) {
            return base.Channel.GetURL(fullUrl);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetURL(string fullUrl, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetURL(fullUrl, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string[] EndGetURL(System.IAsyncResult result) {
            return base.Channel.EndGetURL(result);
        }
        
        private System.IAsyncResult OnBeginGetURL(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string fullUrl = ((string)(inValues[0]));
            return this.BeginGetURL(fullUrl, callback, asyncState);
        }
        
        private object[] OnEndGetURL(System.IAsyncResult result) {
            string[] retVal = this.EndGetURL(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetURLCompleted(object state) {
            if ((this.GetURLCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetURLCompleted(this, new GetURLCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetURLAsync(string fullUrl) {
            this.GetURLAsync(fullUrl, null);
        }
        
        public void GetURLAsync(string fullUrl, object userState) {
            if ((this.onBeginGetURLDelegate == null)) {
                this.onBeginGetURLDelegate = new BeginOperationDelegate(this.OnBeginGetURL);
            }
            if ((this.onEndGetURLDelegate == null)) {
                this.onEndGetURLDelegate = new EndOperationDelegate(this.OnEndGetURL);
            }
            if ((this.onGetURLCompletedDelegate == null)) {
                this.onGetURLCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetURLCompleted);
            }
            base.InvokeAsync(this.onBeginGetURLDelegate, new object[] {
                        fullUrl}, this.onEndGetURLDelegate, this.onGetURLCompletedDelegate, userState);
        }
        
        public void DeleteShortURL(string shortURL) {
            base.Channel.DeleteShortURL(shortURL);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteShortURL(string shortURL, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteShortURL(shortURL, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDeleteShortURL(System.IAsyncResult result) {
            base.Channel.EndDeleteShortURL(result);
        }
        
        private System.IAsyncResult OnBeginDeleteShortURL(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string shortURL = ((string)(inValues[0]));
            return this.BeginDeleteShortURL(shortURL, callback, asyncState);
        }
        
        private object[] OnEndDeleteShortURL(System.IAsyncResult result) {
            this.EndDeleteShortURL(result);
            return null;
        }
        
        private void OnDeleteShortURLCompleted(object state) {
            if ((this.DeleteShortURLCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteShortURLCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteShortURLAsync(string shortURL) {
            this.DeleteShortURLAsync(shortURL, null);
        }
        
        public void DeleteShortURLAsync(string shortURL, object userState) {
            if ((this.onBeginDeleteShortURLDelegate == null)) {
                this.onBeginDeleteShortURLDelegate = new BeginOperationDelegate(this.OnBeginDeleteShortURL);
            }
            if ((this.onEndDeleteShortURLDelegate == null)) {
                this.onEndDeleteShortURLDelegate = new EndOperationDelegate(this.OnEndDeleteShortURL);
            }
            if ((this.onDeleteShortURLCompletedDelegate == null)) {
                this.onDeleteShortURLCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteShortURLCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteShortURLDelegate, new object[] {
                        shortURL}, this.onEndDeleteShortURLDelegate, this.onDeleteShortURLCompletedDelegate, userState);
        }
    }
}
